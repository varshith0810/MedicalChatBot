from langchain_community.document_loaders import PyPDFLoader, DirectoryLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.embeddings import HuggingFaceEmbeddings
from typing import List
from langchain.schema import Document

#Extract text from PDF files
def load_pdf_files(data):
  loader = DirectoryLoader(
      data,
      glob='*.pdf',
      loader_cls=PyPDFLoader,
  )
  documents = loader.load()
  return documents


#minimal docs

def filter_to_minimal_docs(docs: List[Document]) -> List[Document]:
  """
  Given a list of Document objects, return a new list of Document objects
  containing only 'source' in metadata and the original page_content.
  """
  minimal_docs: List[Document] = []
  for doc in docs:
    src = doc.metadata.get("source")
    minimal_docs.append(
        Document(
            page_content=doc.page_content,
            metadata={"source": src},
        )
    )
  return minimal_docs



#Split the documents into smaller chunks
def text_splitter(docs):
  text_splitter = RecursiveCharacterTextSplitter(
      chunk_size=500,
      chunk_overlap=20,
      length_function=len
  )
  text_chunk = text_splitter.split_documents(minimal_docs)
  return text_chunk

#download the embeddings from huggingface

def download_embeddings():
  """
  Download and retrun the HuggingFace embeddings model'
  """
  model_name = "sentence-transformers/all-MiniLM-L6-v2"
  embeddings = HuggingFaceEmbeddings(
      model_name=model_name
  )

  return embeddings

embedding = download_embeddings()
